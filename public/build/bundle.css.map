{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../ConfidencePool.svelte",
    "../../Entry.svelte",
    "../../Pick.svelte",
    "../../RosterMajor.svelte",
    "../../TeamMajor.svelte",
    "../../WeeklyMajor.svelte",
    "../../Overall.svelte",
    "../../OverallRoster.svelte",
    "../../OverallTeam.svelte",
    "../../Picker.svelte",
    "../../ResultsTable.svelte",
    "../../Roster.svelte",
    "../../Team.svelte",
    "../../RosterTourChampionship.svelte",
    "../../TeamTourChampionship.svelte",
    "../../WeeklyTourChampionship.svelte",
    "../../Weekly.svelte"
  ],
  "sourcesContent": [
    "<script>\n \timport Picker from \"./Picker.svelte\"\n\timport Weekly from \"./Weekly.svelte\"\n\timport WeeklyMajor from \"./Major/WeeklyMajor.svelte\"\n\timport WeeklyTourChampionship from \"./TourChampionship/WeeklyTourChampionship.svelte\"\n\timport Overall from \"./Overall.svelte\"\n\timport ConfidencePool from \"./ConfidencePool/ConfidencePool.svelte\"\n\timport { onMount } from \"svelte\"\n  \tlet pages = [\"Weekly\",\"Overall\"]\n\t\n\tlet currentPage = \"Weekly\"\n\n\tlet dvLeague = window.location.href.includes(\"?league=dv\")\n\tlet confidencePool = window.location.href.includes(\"?confidence=\")\n\n</script>\n\n{#if confidencePool}\n\t<div id=\"main\">\n\t\t<ConfidencePool />\n\t</div>\n{:else}\n\t<div id=\"main\" class={dvLeague ? \"dv\" : \"\"}>\n\t\t{#if dvLeague}\n\t\t\t<h3>DV'S GOLF LEAGUE</h3>\n\t\t{/if}\n\t\t<Picker bind:activePage={currentPage} pages={pages} />\n\t\t<br><br>\n\t\t\n\t\t{#if currentPage === \"Weekly\"}\n\t\t\t<Weekly />\n\t\t\t<!-- <WeeklyMajor dvLeague={is_dv} /> -->\n\t\t{:else if currentPage === \"Overall\"}\n\t\t\t<Overall />\n\t\t{/if}\t\n\t</div>\t\n{/if}\n\n<style>\n\t#main {\n\t\tmax-width: 800px;\n\t\tmargin: 0 auto;\n\t}\t\n\t.dv {\n\t\tbackground-color: rgb(0 128 0 / 17%);\n\t\tfont-family: \"Comic Sans MS\", \"Comic Sans\",\"Marker Felt\";\n\t}\n\th3 {\n\t\tpadding: 4px;\n\t\tfont-size: 25px;\n\t\tfont-family: \"Comic Sans MS\", \"Comic Sans\",\"Marker Felt\";\n\t}\n</style>",
    "<script>\n\timport { onMount } from \"svelte\"\n\timport Pick from \"./Pick.svelte\"\n\timport Entry from \"./Entry.svelte\"\n\tlet cavs = window.location.href.includes(\"?confidence=cle\")\n\tlet pels = window.location.href.includes(\"?confidence=pels\")\n\tlet franchise = cavs ? \"The Cavs\" : \"The 'Cans\"\n\tlet spreadsheet_id = pels ? \"1ciYHM-Aan8auuuep--A90OaGKEAaMnkoqrH4ccXppRI\" : \"1N2tavjuLDneq5F9wpYvBMamWxJLKVUXV1Nv1__hKc5M\"\n\n\tlet picks,standings\n\n\t\n\t\n\t\n\n\tonMount(async () => {\n\t\tpicks = await getPicks()\n\t\tstandings = await getStandings()\n\t\tawait standings.forEach((entry)=> {\n\t\t\tpicks.forEach((pick) => {\n\t\t\t\tif (pick[\"Entry\"] == entry[\"Entry\"])\n\t\t\t\t{\n\t\t\t\t\tentry[\"Picks\"].push(pick)\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\t\n\t})\n\tconst getPicks = async () => {\n\t\t\n\t\t// Pels' / Cavs picks gid\n\t\tlet gid = pels ? \"1752659247\" : \"1752659247\"\n\t\t\n\t\t\n\t\tlet endpoint = `https://docs.google.com/spreadsheets/d/`+ spreadsheet_id + `/gviz/tq?tqx=out:json&tq&gid=` + gid\n\n\n\t\tconst response = await fetch(endpoint)\n\t\tconst text = await response.text()\n\t\tconst data = await JSON.parse(text.substring(47).slice(0, -2)).table\n\t\t\n\t\tconst cols = data.cols.map((col) => col.label)\n\t\t// Grab all the picks\n\t\tconst picks = []\n\t\tdata.rows.forEach((row) => {\n\t\t\tconst obj = {}\n\t\t\tcols.forEach((col, i) => {\n\t\t\t\tobj[col] = row.c[i] == null ? null : row.c[i].v\n\t\t\t})\n\t\t\tif (obj[\"Entry\"] != null && obj[\"Wager\"] != null) {\n\t\t\t\tpicks.push(obj)\t\n\t\t\t}\n\t\t})\n\t\treturn picks\n\t}\n\tconst getStandings = async () => {\n\t\t\n\t\t// Pels' standings gid\n\t\tlet gid = pels ? \"1314441307\" : \"1314441307\"\n\t\t\n\t\tlet endpoint = `https://docs.google.com/spreadsheets/d/`+ spreadsheet_id + `/gviz/tq?tqx=out:json&tq&gid=` + gid\n\n\n\t\tconst response = await fetch(endpoint)\n\t\tconst text = await response.text()\n\t\tconst data = await JSON.parse(text.substring(47).slice(0, -2)).table\n\t\t\n\t\tconst cols = data.cols.map((col) => col.label)\n\t\t// Grab all the picks\n\t\tconst standings = []\n\t\tdata.rows.forEach((row) => {\n\t\t\tconst obj = {}\n\t\t\tcols.forEach((col, i) => {\n\t\t\t\tobj[col] = row.c[i] == null ? null : row.c[i].v\n\t\t\t})\n\t\t\tobj[\"Picks\"] = []\n\t\t\tif (obj[\"Entry\"] != null) {\n\t\t\t\tstandings.push(obj)\t\n\t\t\t}\n\t\t})\n\t\treturn standings\n\t}\n</script>\n\n<a href=\"/public/?confidence={pels ? 'cle' : 'pels'}\">\n\t<h1>{franchise} Confidence Pool</h1>\n</a>\n<!-- <code>{JSON.stringify(standings)}</code> -->\n{#if standings && picks}\n\t{#each standings as entry, i}\n\t\t<table class=\"team\" width=\"100%\" border=\"0\">\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<Entry entry={entry['Entry']} placenumber={i+1} pointswon={entry['Points Won']} pointsremaining={entry['Points Remaining']} picks={entry['Picks']} />\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t{/each}\n\t\n{/if}\n\n<style>\n\th1 {\n\t\tfont-size: 18px;\n\t    text-align: center;\n\t    text-transform: uppercase;\n\t    margin-bottom: 5px;\n\t    font-weight: normal;\t\n\t}\n\ta {\n\t\tcolor: black;\n\t\ttext-decoration: none;\n\t}\n\t.team {\n    \tmargin: 5px 0px;\n    \tborder-radius: 4px;\n    \tborder: 1px solid #ddd;\n    \tbackground-color: white;\n  \t}\n  \t.panel-group {\n\t    margin-bottom: 20px;\n\t\tborder-radius: 4px;\n\t}\n\t\n</style>",
    "<script>\n\timport Pick from \"./Pick.svelte\"\n\timport { slide } from 'svelte/transition'\n\texport let entry,pointswon,pointsremaining,placenumber,picks\n\tlet teamName = entry.slice(0, -1).split(\" (\")[0]\n\tlet owner = entry.slice(0, -1).split(\" (\")[1]\n\tlet picksVisible = false\n\tlet points = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]\n\tlet picks_no_champs = picks.filter((element, index) => index < picks.length - 1);\n\n\tfunction togglePicks() {\n    \tpicksVisible = !picksVisible\n    \tif (picksVisible) {\n\t\t  \tga('send', {\n\t\t  \t\thitType: 'event',\n\t\t  \t\teventCategory: 'Confidence Pool',\n\t\t  \t\teventAction: 'Click Picks',\n\t\t  \t\teventLabel: entry\n\t\t\t});\n    \t}\n    }\n</script>\n<div class=\"team\">\n\t<div class=\"team\" on:click={togglePicks}>\n\t\t<div class=\"header\">\n\t\t\t<table border=\"0\" width=\"100%\">\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"standings-place-number\" width=\"20\">{placenumber}</td>\n\t\t\t\t\t\t<td class=\"team-name\">\n\t\t\t\t\t\t\t{teamName}\n\t\t\t\t\t\t\t<div class=\"owner\">{owner}</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td align=\"right\">\n\t\t\t\t\t\t\t<span class=\"pointswon\">{pointswon} pts</span>\n\t\t\t\t\t\t\t<span class=\"pointsremaining\">{pointsremaining} left</span>\n\t\t\t\t\t\t\t<!-- <span class=\"pointshighestpossible\">{pointswon + pointsremaining} total</span> -->\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<div class=\"point-picks\">\n\t\t\t\t\t{#each points as point}\n\t\t\t\t\t\t{#each picks_no_champs as pick}\n\t\t\t\t\t\t\t{#if pick[\"Wager\"] === point}\n\t\t\t\t\t\t\t\t<span class=\"point-value {pick['Points Won'] > 0 ? 'pickwon' : pick['Points Lost'] > 0 ? 'picklost' : ''} \">\n\t\t\t\t\t\t\t\t\t{point}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t{#if picksVisible}\n\t\t\t\n\t\t\t<div class=\"roster\" transition:slide>\n\t\t\t\t<table class=\"roster-table\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class='roster-header'>Team</th>\n\t\t\t                <th class='roster-header'>Wager</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t{#each picks as pick}\n\t\t\t\t\t\t<Pick entry={pick['Entry']} team={pick['Team']} wager={pick['Wager']} pointswon={pick['Points Won']} pointslost={pick['Points Lost']}/>\n\t\t\t\t\t{/each}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n</div>\n<style>\n\t.team {\n    \tmargin: 5px 0px;\n    \tborder-radius: 4px;\n    \tbackground-color: white;\t\n  \t}\n  \t.header {\n  \t\tpadding: 5px 2px;\n  \t}\n\t.standings-place-number {\n\t    color: black;\n\t    padding-left: 5px;\n\t    padding-top: 6px;\n\t    font-size: 12px;\n\t    text-align: left;\n\t}\n\t.team-name {\n\t    font-size: 16px;\n\t    margin: 0px 8px;\n\t    color: #46404A;\n\t    text-align: left;\n\t    width: 60%;\n\t}\n\t.owner {\n\t    color: lightslategrey;\n\t    font-size: 12px;\n\t    font-family: \"Roboto\";\n\t}\n\t.pointswon {\n\t    background-color: #7bbb5e;\n    \tcolor: white;\n    \tfont-family: \"Roboto\";\n    \tpadding: .2em .2em .2em;\n    \tfont-size: 12px;\n    \tdisplay: inline;\n    \tfont-weight: 700;\n    \tline-height: 1;\n    \tborder-radius: .25em;\n\t}\n\t.pointsremaining {\n\t\tbackground-color: lightslategrey;\n    \tcolor: white;\n    \tfont-family: \"Roboto\";\n    \tpadding: .2em .2em .2em;\n    \tfont-size: 12px;\n    \tdisplay: inline;\n    \tfont-weight: 700;\n    \tline-height: 1;\n    \tborder-radius: .25em;\n\t}\n\t.pointshighestpossible {\n\t\tbackground-color: black;\n    \tcolor: white;\n    \tfont-family: \"Roboto\";\n    \tpadding: .2em .2em .2em;\n    \tfont-size: 12px;\n    \tdisplay: inline;\n    \tfont-weight: 700;\n    \tline-height: 1;\n    \tborder-radius: .25em;\n\t}\n\t.roster {\n\t\tmargin-bottom: 10px;\n\t}\n\t.roster-table {\n\t\tmargin: 0 auto;\n\t\tborder-spacing: 0;\n\t    border-collapse: collapse;\n\t}\n\t.roster-header {\n\t\tfont-family: \"Fjalla One\";\n\t    /*border-bottom: 1px solid black;*/\n\t    text-transform: uppercase;\n\t    font-size: 12px;\n\t    text-decoration: none;\n\n\t}\n\t.player-row {\n\t\tfont-size: 10px;\n\t\tfont-family: \"Roboto\";\n\t\tpadding: 5px;\n\t}\n\t.point-picks {\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t\ttext-align: left;\n\t}\n\t.point-value {\n\t\tdisplay: inline-block;\n\t    padding: 0.25em 0.4em;\n\t    font-size: 10px;\n\t    line-height: 1;\n\t    text-align: center;\n\t    white-space: nowrap;\n\t    vertical-align: baseline;\n\t    border-radius: 0.25rem;\n\t    background-color: darkgray;\n\t    color: white;\n\t    font-family: \"Roboto\";\n\t    font-size: 9px;\n\t    margin: 1px 0px;\n\t}\n\t.pickwon {\n\t\tbackground-color: #7bbb5e;\n\t}\n\t.picklost {\n\t\tbackground-color: #dc3545;\n\t}\n\t\n</style>",
    "<script>\n\texport let entry,team,wager,pointswon,pointslost\n\tlet pickstatus = pointswon > 0 ? \"won\" : pointslost >0 ? \"lost\" : \"notplayed\"\n</script>\n\n<tr class=\"player-row\">\n\t<td class=\"{pickstatus}\">{team}</td>\n\t<td class=\"{pickstatus}\">{wager}</td>\n</tr>\n\n<style>\n\t\n\t\n\t.player-row {\n\t\tfont-size: 12px;\n\t\tfont-family: \"Roboto\";\n\t\tpadding: 5px;\n\t}\n\ttd {\n\t\tpadding: 5px;\n\t}\n\t.won {\n\t\tcolor: green;\n\t}\n\t.lost {\n\t\tcolor: red;\n\t}\n\n</style>",
    "<script>\n\timport { slide } from 'svelte/transition'\n\texport let roster, teamName\n</script>\n\n<div class=\"roster\" transition:slide>\n\t<table class=\"roster-table\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th class='roster-header'>Golfer</th>\n                <th class='roster-header'><img src=\"https://www.fedex.com/etc.clientlibs/designs/fedex-common/images/resources/fx-favicon.ico\"></th>\n                <th class='roster-header'>Pos</th>\n                <th class='roster-header'>Total</th>\n                <th class='roster-header'>Today</th>\n                <th class='roster-header'>Thru</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{#each roster as player}\n\t\t\t\t<!-- {#if player.isPlaying} -->\n\t\t\t\t\t<tr class=\"player-row{player.isPlaying ? '' : ' inactive'}{player.secondTourney ? ' second-tourney' : ''}{' ' + player.pgaStatus}\">\n\t\t\t\t\t\t<td>{player.name}</td>\n\t                    <td>{player.position ? player.projMoney : \"\"}</td>\n\t                    <td>{player.isPlaying ? (player.position ? player.position : (player.pgaStatus === \"wd\" ? \"WD\" : (player.pgaStatus == \"active\" ? \"\" : \"CUT\"))) : \"\"}</td>\n\t                    <td>{player.position ? (player.total ? player.total : \"E\") : \"\"}</td>\n\t                    <td>{player.today != undefined ? (player.today == 0 ? \"E\" : player.today) : \"\"}</td>\n\t                    <td>{player.thru ? player.thru : \"\"}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t<!-- {/if} -->\n\t\t\t{/each}\n\t\t</tbody>\n\t</table>\n</div>\n\n<style>\n\t.roster {\n\t\tmargin-bottom: 10px;\n\t}\n\t.roster-table {\n\t\tmargin: 0 auto;\n\t\tborder-spacing: 0;\n\t    border-collapse: collapse;\n\t}\n\t.roster-header {\n\t\tfont-family: \"Fjalla One\";\n\t    border-bottom: 1px solid black;\n\t    text-transform: uppercase;\n\t    font-size: 10px;\n\t    text-decoration: none;\n\n\t}\n\t.player-row {\n\t\tfont-size: 10px;\n\t\tfont-family: \"Roboto\";\n\t\tpadding: 5px;\n\t}\n\ttd {\n\t\tpadding: 5px;\n\t}\n\t.active {\n\t\tbackground-color: white;\n\t}\n\t.second-tourney {\n\t\tbackground-color: #fff2cc;\n\t}\n\t.cut {\n\t\tbackground-color: #ea9999;\n\t}\n\t.wd {\n\t\tbackground-color: #ea9999;\n\t}\n\t.inactive {\n\t\tbackground-color: #dedede;\n\t\tdisplay: none;\n\t}\n\t.favorite-button {\n\t\tmargin: 5px;\n\t}\n</style>",
    "<script>\n\timport RosterMajor from \"./RosterMajor.svelte\"\n\texport let team, placeNumber, isFavorite\n\tlet id = team.id.$t.replace(\"https://spreadsheets.google.com/feeds/list/1YsZn_ovmbxOE8gUlmAT7z_nUv5mg9qRdwnNAX-lIrnI/2/public/full/\", \"\")\n\tlet teamName = team.gsx$team.$t\n\tlet teamNameNoOwner = team.gsx$teamname.$t\n\tlet owner = team.gsx$owner.$t\n\tlet pictureUrl = \"https://pga-tour-res.cloudinary.com/image/upload/c_fill,dpr_2.0,f_auto,g_face:center,h_45,q_auto,t_headshots_leaderboard_l,w_45/headshots_\" + team.roster[0].id + \".png\"\n    let rosterVisible = false\n\n\n    function toggleRoster() {\n    \trosterVisible = !rosterVisible\n    \tif (rosterVisible) {\n\t\t  \tga('send', {\n\t\t  \t\thitType: 'event',\n\t\t  \t\teventCategory: 'Weekly',\n\t\t  \t\teventAction: 'Click Team',\n\t\t  \t\teventLabel: teamName\n\t\t\t});\n    \t}\n  \n    }\n\n</script>\n\n\n<div class=\"team\">\n\t<div class=\"header\" on:click={toggleRoster}>\n\t\t<table border=\"0\" width=\"100%\">\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"standings-place-number\" width=\"15\">{placeNumber}</td>\n\t\t\t\t\t<td width=\"55\">\n\t\t\t\t\t\t<img class=\"player-photo\" src=\"{pictureUrl}\" width=\"45\" height=\"45\">\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"team-name {isFavorite ? \" favorite\" : \"\"}\">\n\t\t\t\t\t\t{teamNameNoOwner}\n\t\t\t\t\t\t<div class=\"owner {isFavorite ? \" favorite\" : \"\"}\">{owner}</div>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"team-earnings {isFavorite ? \" favorite\" : \"\"}\">\n\t\t\t\t\t\t<img src=\"https://www.fedex.com/etc.clientlibs/designs/fedex-common/images/resources/fx-favicon.ico\"><br>{team.totalMoney}\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t{#if rosterVisible}\n\t\t<RosterMajor roster={team.roster} teamName={teamName}></RosterMajor>\n\t{/if}\n</div>\n\n\n<style>\n\t\n  \t.header {\n  \t\tpadding: 5px 2px;\n  \t}\n\t.standings-place-number {\n\t    color: black;\n\t    margin: 0px 5px;\n\t    /*padding-left: 5px;*/\n\t    font-size: 12px;\n\t    text-align: left;\n\t}\n\t.player-photo {\n    \tmargin-right: 8px;\n    \tmargin-left: 4px;\n \t}\n\t.team-name {\n\t    font-size: 16px;\n\t    margin: 0px 8px;\n\t    color: #46404A;\n\t    text-align: left;\n\t}\n\t.owner {\n\t    color: lightslategrey;\n\t    font-size: 12px;\n\t    font-family: \"Roboto\";\n\t}\n\t.team-earnings {\n\t    color: #46404A;\n\t    font-size: 16px;\n\t    padding: 0px 0px;\n\t    text-align: right;\n\t    line-height: 0.1;\n\t}\n\t.favorite {\n\t\tcolor: #de0000;\n\t}\n</style>",
    "<script>\n  \timport { onMount } from \"svelte\"\n\timport TeamMajor from \"./TeamMajor.svelte\"\n\timport moment from \"moment\"\n\tlet teams, tourneyName, leaderboard, favoriteTeam\n\texport let dvLeague = false\n\t// onMount do all of our async functions\n\tonMount(async () => {\n\n\t\tif (document.cookie.split('; ').find(row => row.startsWith('favoriteTeam'))) {\n\t\t\tfavoriteTeam = document.cookie.split('; ').find(row => row.startsWith('favoriteTeam')).split('=')[1];\t\n\t\t}\n\t\telse {\n\t\t\tfavoriteTeam = \"\"\n\t\t}\n\t\t\n\t\tconst tourneyIds = await getRelevantTournament()\n\t\tconst rawTeams = await getTeamRosters()\n\n\t\tconst firstTourneyTeams = processTeams(rawTeams, await getPgaStandings(tourneyIds[0]))\n\n\t\t// If there's more than 1 tournament then we need to process the 2nd one also\n\t\tif (tourneyIds.length > 1) {\n\t\t\tconst secondTourneyTeams = await processSecondTourney(tourneyIds[1], firstTourneyTeams)\n\t\t\tteams = await sortTeams(secondTourneyTeams)\n\t\t}\n\t\telse {\n\t\t\tteams = sortTeams(firstTourneyTeams)\n\t\t}\n\t\t\n\t\t\n\t\t\n\t})\n\tfunction setFavorite(message) {\n    \tdocument.cookie = \"favoriteTeam=\" + message\n    \tfavoriteTeam = message\n    \tga('send', {\n\t\t  \t\thitType: 'event',\n\t\t  \t\teventCategory: 'Weekly',\n\t\t  \t\teventAction: 'Favorite',\n\t\t  \t\teventLabel: teamName\n\t\t\t});\n    }\n    const processSecondTourney = async (tourneyId, firstTourneyTeams) => {\n    \tconst standings = await getPgaStandings(tourneyId)\n    \tawait firstTourneyTeams.forEach((team) => {\n    \t\tteam.roster.forEach((player) => {\n    \t\t\tconst pgaPlayerMatches = standings.filter(p => p.player_id === player.id)\n    \t\t\tif (pgaPlayerMatches.length > 0) {\n\t\t\t\t\t\tplayer.isPlaying = true\n\t\t\t\t\t\tconst pgaPlayer = pgaPlayerMatches[0]\n\t\t\t\t\t\tplayer.name = pgaPlayer.player_bio.first_name + ' ' + pgaPlayer.player_bio.last_name\n\t\t\t\t\t\tplayer.positionNum = parseInt(pgaPlayer.current_position.replace(/\\D/g,''))\n\t\t\t\t\t\tplayer.position = pgaPlayer.current_position\n\t\t\t\t\t\tplayer.projMoney = pgaPlayer.rankings.projected_money_event\n\t\t\t\t\t\tplayer.projCupPoints = pgaPlayer.rankings.projected_cup_points_event\n\t\t\t\t\t\tplayer.today = pgaPlayer.today\n\t\t\t\t\t\tplayer.thru = pgaPlayer.thru\n\t\t\t\t\t\tplayer.total = pgaPlayer.total\n\t\t\t\t\t\tplayer.playerId = pgaPlayer.player_id\n\t\t\t\t\t\tplayer.pgaStatus = pgaPlayer.status\n\t\t\t\t\t\tteam.totalMoney += pgaPlayer.rankings.projected_cup_points_event\n\t\t\t\t\t\tplayer.sort = isNaN(player.positionNum) ? -1 : parseInt(player.projCupPoints)\n\t\t\t\t\t\tplayer.secondTourney = true\n\t\t\t\t\t\tplayer.firstRoundTeeTime = moment(pgaPlayer.rounds[0].tee_time).format(\"h:mm a\")\n\t\t\t\t\t\t\n\t\t\t\t\t}\n    \t\t})\n    \t})\n    \treturn firstTourneyTeams    \t\n    }\n    const sortTeams  = (rawTeams) => {\n    \tconst sortedTeams = rawTeams.sort((a,b) => {\n\t\t\treturn a.totalMoney > b.totalMoney ? -1 : a.totalMoney < b.totalMoney ? 1 : 0\n\t\t})\n\t\tsortedTeams.forEach( (team) => {\n\t\t\tconst sortedRoster = team.roster.sort((a, b) => (a.sort < b.sort) ? 1 : -1)\n\t\t\tteam.roster = sortedRoster\n\t\t})\n\t\treturn rawTeams\n    }\n\tconst processTeams = (rawTeams, pgaStanding) => {\n\t\trawTeams.forEach((team) => {\n\t\t\t  team.processed = true\n\t\t\t  team.roster = []\n\t\t\t  team.totalMoney = 0.0\n\t\t\t  if (team.gsx$roster.$t != undefined) {\n\t\t\t\t\tJSON.parse(team.gsx$roster.$t).forEach((player) => {\n\t\t\t\t\t\tconst pgaPlayerMatches = pgaStanding.filter(p => p.player_id === player.id)\n\t\t\t\t\t\tif (pgaPlayerMatches.length > 0) {\n\t\t\t\t\t\t\tplayer.isPlaying = true\n\t\t\t\t\t\t\tconst pgaPlayer = pgaPlayerMatches[0]\n\t\t\t\t\t\t\tplayer.name = pgaPlayer.player_bio.first_name + ' ' + pgaPlayer.player_bio.last_name,\n\t\t\t\t\t\t\tplayer.positionNum = parseInt(pgaPlayer.current_position.replace(/\\D/g,'')),\n\t\t\t\t\t\t\tplayer.position = pgaPlayer.current_position,\n\t\t\t\t\t\t\tplayer.projMoney = pgaPlayer.rankings.projected_cup_points_event,\n\t\t\t\t\t\t\tplayer.today = pgaPlayer.today,\n\t\t\t\t\t\t\tplayer.thru = pgaPlayer.thru,\n\t\t\t\t\t\t\tplayer.total = pgaPlayer.total,\n\t\t\t\t\t\t\tplayer.playerId = pgaPlayer.player_id,\n\t\t\t\t\t\t\tplayer.pgaStatus = pgaPlayer.status,\n\t\t\t\t\t\t\tteam.totalMoney += pgaPlayer.rankings.projected_cup_points_event,\n\t\t\t\t\t\t\tplayer.secondTourney = false\n\t\t\t\t\t\t}\n\t\t\t\t\t\tteam.roster.push(player)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t})\n\t\trawTeams.forEach((team) => {\n\t\t\tteam.roster.forEach((player) => {\n\t\t\t\tif (player.isPlaying === undefined) {\n\t\t\t\t\tplayer.isPlaying = false\n\t\t\t\t\t// If not playing put at bottom of list\n\t\t\t\t\tplayer.sort = -2\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (isNaN(player.positionNum)) {\n\t\t\t\t\t\t// Next up is cut players\n\t\t\t\t\t\tplayer.sort = -1\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Then sort by projected money\n\t\t\t\t\t\tplayer.sort = parseInt(player.projMoney)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\treturn rawTeams\n\t}\n\t\n\t// Hit the google sheet for the schedule\n\tconst getRelevantTournament = async () => {\n\t\t// const response = await fetch(`https://spreadsheets.google.com/feeds/list/1YsZn_ovmbxOE8gUlmAT7z_nUv5mg9qRdwnNAX-lIrnI/1/public/full?alt=json`)\n\t\tconst response = await fetch(`https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/schedule?timestamp=` + Date.now())\n\t\t\n\t\tconst data = await response.json()\n\t\tconst today = new Date()\n\t\tconst tourneysBeforeToday = data.feed.entry.filter(event => new Date(Date.parse(event.gsx$date.$t)) <= today.setHours(0,0,0,0))\n\t\t\n\t\tconst tourneyIds = []\n\t\tconst tourneyNames = []\n\t\t// grab the last tournament but check if any others have the same date\n\t\ttourneysBeforeToday.forEach((t) => {\n\t\t\tif (tourneysBeforeToday.slice(-1)[0].gsx$date.$t === t.gsx$date.$t) {\n\t\t\t\ttourneyIds.push(t.gsx$tournamentid.$t)\n\t\t\t\ttourneyNames.push(t.gsx$name.$t)\n\t\t\t}\n\t\t})\n\t\ttourneyName = tourneyNames.join(\" / \")\n\t\treturn tourneyIds;\n\t}\n\t\n\tconst getPgaStandings = async (tourneyIds) => {\n\t\t\t// Hit KVDB to get our security blurb so we can call the PGA method\n\t\t\tconst response = await fetch(`https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/pgasecurityblurb?timestamp=\"` + Date.now());\n\t\t\tconst securityBlurb = await response.text()\n\t\t\t// This is where we hit the PGA\n\t\t\treturn makePgaCall(securityBlurb, tourneyIds);\n\t}\n\t\n\tconst makePgaCall = async (securityBlurb, tourneyId) => {\n\t\t\tconst pgaResp = await fetch(\"https://statdata.pgatour.com/r/\" + tourneyId + \"/2021/leaderboard-v2.json\" + securityBlurb + \"&timestamp=\" + Date.now());\n\t\t\tconst jsonResp = await pgaResp.json()\n\t\t\tleaderboard = await jsonResp.leaderboard.players\n\t\t\treturn jsonResp.leaderboard.players\n\t}\n\t\n\t// This one gets our team rosters from the Google Sheet\n\tconst getTeamRosters = async () => {\n\t\t// const response = await fetch(`https://spreadsheets.google.com/feeds/list/1YsZn_ovmbxOE8gUlmAT7z_nUv5mg9qRdwnNAX-lIrnI/2/public/full?alt=json`)\n\t\tconst endpoint = `https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/` + (dvLeague ? 'dv_rosters' : 'rosters')\n\t\tconst response = await fetch(endpoint)\n\t\tconst data = await response.json()\n\t\treturn await data.feed.entry.filter(e => e.gsx$roster.$t)\n\t}\n</script>\n\n<div width=\"100%\" style=\"background-color: lightgrey; padding: 5px;\">\n\t<h3>It's a major! These standings are based on projected FedEx points, so they're unofficial.</h3>\n</div>\n{#if tourneyName}\n\t<h1 class=\"tourney-name\">{tourneyName}</h1>\n{:else}\n\t<img class=\"sheets-icon\" src=\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_spreadsheet_x32.png\" alt=\"Loading\"><span>&nbsp;Loading current tournament</span>\n{/if}\n\n<!-- {#if leaderboard}\n\t<Leaderboard leaderboard={leaderboard}></Leaderboard>\t\n{/if} -->\n\n\n<div class=\"teams\">\n\t{#if teams}\n\t\t{#each teams as team, i}\n\t\t\t<table class=\"team\" width=\"100%\" border=\"0\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"favorite-cell\" width=\"30\">\n\t\t\t\t\t\t<span class=\"favorite-button\" on:click={setFavorite(team.gsx$team.$t)}>\n\t\t\t\t\t\t{#if favoriteTeam === team.gsx$team.$t}\n\t\t\t\t\t\t\t<span style=\"font-size: 10px;\">❤️</span>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<span style=\"font-size: 13px;color: #969494;\">♡</span>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</span>\t\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<TeamMajor team={team} placeNumber={i+1} isFavorite={favoriteTeam === team.gsx$team.$t}></TeamMajor>\t\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t  \t{/each}\n\t{:else}\n\t\t<img class=\"sheets-icon\" src=\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_spreadsheet_x32.png\" alt=\"Loading\"><span>&nbsp;Loading teams and standings</span>\n\t{/if}\n</div>\n\n\n<style>\n\t.tourney-name {\n\t  font-size: 18px;\n\t  text-align: center;\n\t  text-transform: uppercase;\n\t  margin-bottom: 5px;\n\t  font-weight: normal;\n\t}\n\t.panel-group {\n\t    margin-bottom: 20px;\n\t\tborder-radius: 4px;\n\t}\n\t.team {\n    \tmargin: 5px 0px;\n    \tborder-radius: 4px;\n    \tborder: 1px solid #ddd;\n    \tbackground-color: white;\n  \t}\n  \t.favorite-cell {\n  \t\tvertical-align: top;\n  \t\tpadding-top: 22px;\n  \t}\n</style>",
    "<script>\n\timport { onMount } from \"svelte\"\n\timport OverallTeam from \"./OverallTeam.svelte\"\n\tlet overall, favoriteTeam\n\tlet nate = window.location.search.indexOf(\"nate\") != -1\n\t// export let dvLeague = false\n\t\n\tonMount(async () => {\n\t\toverall = await getOverallStandings()\n\t\tif (document.cookie.split('; ').find(row => row.startsWith('favoriteTeam'))) {\n\t\t\tfavoriteTeam = document.cookie.split('; ').find(row => row.startsWith('favoriteTeam')).split('=')[1];\t\n\t\t}\n\t\telse {\n\t\t\tfavoriteTeam = \"\"\n\t\t}\n\t})\n\tfunction setFavorite(message) {\n    \tdocument.cookie = \"favoriteTeam=\" + message\n    \tfavoriteTeam = message\n    \tga('send', {\n\t\t  \t\thitType: 'event',\n\t\t  \t\teventCategory: 'Weekly',\n\t\t  \t\teventAction: 'Favorite',\n\t\t  \t\teventLabel: teamName\n\t\t\t});\n    }\n\tconst getOverallStandings = async () => {\n\t\t// let spreadsheet_id = \"1YsZn_ovmbxOE8gUlmAT7z_nUv5mg9qRdwnNAX-lIrnI\"\n\t\t// let gid_overall = \"1520535624\"\n\t\t// let gid_earnings = \"1425386487\"\n\t\t\n\t\t// if (nate) {\n\t\t// \tspreadsheet_id = \"1Ur-zgH5O5iwTJ3J5pUXT-hu1irNo9W5NfJwWa5RxiW0\"\n\t\t// }\n\n\t\t// First we hit the Overall Standings sheet\n\t\t// const endpointOverall = `https://docs.google.com/spreadsheets/d/` + spreadsheet_id + `/gviz/tq?tqx=out:json&tq&gid=` + gid_overall\n\t\tconst endpointOverall = `https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/overall`\n\n\t\tconst response = await fetch(endpointOverall)\n\t\tconst text = await response.text()\n\t\tconst raw = await JSON.parse(text.substring(47).slice(0, -2)).table\n\t\tconst overallData = raw.rows.filter(r => r.c[3] != null)\n\t\t\n\t\t// Then we hit the Golfer Earnings sheet\n\t\t// const endpointGolferEarnings = `https://docs.google.com/spreadsheets/d/` + spreadsheet_id + `/gviz/tq?tqx=out:json&tq&gid=` + gid_earnings\n\t\tconst endpointGolferEarnings = `https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/golfer-earnings`\n\n\t\tconst response2 = await fetch(endpointGolferEarnings)\n\t\tconst text2 = await response2.text()\n\t\tconst data = await JSON.parse(text2.substring(47).slice(0, -2)).table\n\t\t\n\t\tconst cols = data.cols.map((col) => col.label)\n\t\t// Grab all the golfers\n\t\tconst golfers = []\n\t\tdata.rows.forEach((row) => {\n\t\t\tconst obj = {}\n\t\t\tcols.forEach((col, i) => {\n\t\t\t\tobj[col] = row.c[i] == null ? null : row.c[i].v\n\t\t\t})\n\t\t\tif (obj[\"Team\"] != null) {\n\t\t\t\tgolfers.push(obj)\t\n\t\t\t}\n\t\t})\n\t\t\n\t\tlet teams = []\n\t\t// Now go through the teams and assign a roster\n\t\toverallData.forEach(t => {\n\t\t\tlet teamObj = {\n\t\t\t\t\"nameAndOwner\": t.c[1].v,\n\t\t\t\t\"name\": t.c[1].v.replace(\")\", \"\").split(\" (\")[0],\n\t\t\t\t\"owner\": t.c[1].v.replace(\")\", \"\").split(\" (\")[1],\n\t\t\t\t\"balance\": t.c[3].v,\n\t\t\t\t\"earnings\": t.c[2].v,\n\t\t\t\t\"roster\": []\n\t\t\t}\n\t\t\tgolfers.forEach(golfer => {\n\t\t\t\tif (golfer.Team == teamObj[\"nameAndOwner\"]) {\n\t\t\t\t\tteamObj.roster.push({\n\t\t\t\t\t\t\"name\": golfer.Name,\n\t\t\t\t\t\t\"earnings\": golfer.Earnings\n\t\t\t\t\t})\n\t\t\t\t} \n\t\t\t})\n\t\t\tteams.push(teamObj)\n\t\t})\n\n\t\tconst sortedTeams = teams.sort((a,b) => {\n\t\t\treturn b.earnings - a.earnings\n\t\t})\n\t\tconsole.log(sortedTeams)\n\t\treturn sortedTeams\n\t}\n</script>\n\n<div class=\"teams\">\n\t{#if overall}\n\t\t{#each overall as team, i}\n\t\t\t<table class=\"team\" width=\"100%\" border=\"0\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<OverallTeam team={team} placeNumber={i+1} isFavorite={false}></OverallTeam>\t\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t\t\n\t\t{/each}\n\t{:else}\n\t\t<img class=\"sheets-icon\" src=\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_spreadsheet_x32.png\"><span>&nbsp;Loading overall standings</span>\n\t{/if}\n</div>\n\n<style>\n\t.favorite-cell {\n\t\tvertical-align: top;\n\t  \tpadding-top: 22px;\n\t}\n\t.team {\n    \tmargin: 5px 0px;\n    \tborder-radius: 4px;\n    \tborder: 1px solid #ddd;\n    \tbackground-color: white;\n  \t}\n  \t.panel-group {\n\t    margin-bottom: 20px;\n\t\tborder-radius: 4px;\n\t}\n</style>",
    "<script>\n\timport { slide } from 'svelte/transition'\n\texport let roster\n</script>\n\n<style>\n\t.roster {\n\t\tmargin-bottom: 10px;\n\t}\n\t.roster-table {\n\t\tmargin: 0 auto;\n\t\tborder-spacing: 0;\n\t    border-collapse: collapse;\n\t}\n\t.roster-header {\n\t\tfont-family: \"Fjalla One\";\n\t    border-bottom: 1px solid black;\n\t    text-transform: uppercase;\n\t    font-size: 10px;\n\t    text-decoration: none;\n\n\t}\n\t.player-row {\n\t\tfont-size: 10px;\n\t\tfont-family: \"Roboto\";\n\t\tpadding: 5px;\n\t}\n\ttd {\n\t\tpadding: 5px;\n\t}\n</style>\n<div class=\"roster\" transition:slide>\n\t<table class=\"roster-table\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th class='roster-header'>Golfer</th>\n                <th class='roster-header'>Earnings</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{#each roster as player}\n\t\t\t\t<tr class=\"player-row\">\n\t\t\t\t\t<td>{player.name}</td>\n\t\t\t\t\t<td>{numeral(player.earnings).format('$0,0')}</td>\n\t\t\t\t</tr>\n\t\t\t{/each}\n\t\t</tbody>\n\t</table>\n</div>",
    "<script>\n\timport OverallRoster from \"./OverallRoster.svelte\"\n\texport let team, placeNumber, isFavorite\n    let rosterVisible = false\n    let dvLeague = window.location.href.includes(\"?league=dv\")\n\n    function toggleRoster() {\n    \trosterVisible = !rosterVisible\n    \tif (rosterVisible) {\n\t\t  \tga('send', {\n\t\t  \t\thitType: 'event',\n\t\t  \t\teventCategory: 'Overall',\n\t\t  \t\teventAction: 'Click Team',\n\t\t  \t\teventLabel: team.name\n\t\t\t});\n    \t}\n    }\n\n</script>\n\n<div class=\"team\">\n\t<div class=\"team\" on:click={toggleRoster}>\n\t\t<div class=\"header\">\n\t\t\t<table border=\"0\" width=\"100%\">\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"standings-place-number\" width=\"20\">{placeNumber}</td>\n\t\t\t\t\t\t<td width=\"50\" align=\"left\">\n\t\t\t\t\t\t\t<span class=\"team-total-payout { team.balance < 0 ? 'negative' : ''}\">{numeral(team.balance).format(\"$0\")}</span>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td class=\"team-name{isFavorite ? \" favorite\" : \"\"}\">\n\t\t\t\t\t\t\t{team.name}\n\t\t\t\t\t\t\t<div class=\"owner {dvLeague ? \" invisible\" : \"\"}\">{team.owner}</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td class=\"team-earnings{isFavorite ? \" favorite\" : \"\"}\">\n\t\t\t\t\t\t\t{numeral(team.earnings).format('$0,0')}<br>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t\t{#if rosterVisible}\n\t\t\t<OverallRoster roster={team.roster}></OverallRoster>\n\t\t{/if}\n\t</div>\n</div>\n\n\n<style>\n\t.team {\n    \tmargin: 5px 0px;\n    \tborder-radius: 4px;\n    \t/*border: 1px solid #ddd;*/\n    \tbackground-color: white;\t\n  \t}\n  \t.header {\n  \t\tpadding: 5px 2px;\n  \t}\n\t.standings-place-number {\n\t    color: black;\n\t    padding-left: 5px;\n\t    padding-top: 6px;\n\t    font-size: 12px;\n\t    text-align: left;\n\t}\n\t.player-photo {\n    \tmargin: 0px 8px;\n \t}\n\t.team-name {\n\t    font-size: 16px;\n\t    margin: 0px 8px;\n\t    color: #46404A;\n\t    text-align: left;\n\t}\n\t.owner {\n\t    color: lightslategrey;\n\t    font-size: 12px;\n\t    font-family: \"Roboto\";\n\t}\n\t.team-earnings {\n\t    color: #46404A;\n\t    font-size: 15px;\n\t    padding: 0px 0px;\n\t    text-align: right;\n\t}\n\t.team-total-payout {\n\t\tbackground-color: #7bbb5e;\n    \tcolor: white;\n    \tfont-family: \"Roboto\";\n    \tpadding: .2em .2em .2em;\n    \tfont-size: 12px;\n    \tdisplay: inline;\n    \tfont-weight: 700;\n    \tline-height: 1;\n    \tborder-radius: .25em;\n\t}\n\t.negative {\n\t\tbackground-color: #d9534f;\n\t}\n\t.favorite {\n\t\tcolor: #de0000;\n\t}\n</style>",
    "<script>\n  import { onMount } from \"svelte\"\n  export let pages = []\n  export let activePage\n  let dvLeague = window.location.href.includes(\"?league=dv\")\n\n  onMount(() => {\n    // Set default tab value\n    activePage = pages[0]\n  });\n  \n\tconst handleClick = tabValue => () => (activePage = tabValue)\n</script>\n\n<div class=\"picker\">\n\t{#each pages as page}\n\t\t<span class=\"picker-option {activePage === page ? ' selected' : ''} {dvLeague ? ' comic' : ''}\" href=\"#{page}\" on:click={handleClick(page)}>\n\t\t\t{page}\n\t\t</span>\n\t{/each}\n</div>\n\n\n\n<style>\n\t.picker {\n  \t\tmargin-top:  10px;\n\t}\n\t\n\t.picker-option {\n\t\tmargin: 20px;\n\t\tcolor: grey;\n\t\tfont-family: \"Arial\";\n\t\tcursor: pointer; \n\t\ttext-transform: uppercase;\n\t\tfont-weight: 800;\n\t}\n\n\t.selected {\n\t\tcolor: #337ab7;\n\t\tborder-bottom: 1px solid #337ab7;\n\t\tpadding-bottom: 3px;\n\t}\n\n\t.comic {\n\t\tfont-family: \"Comic Sans MS\", \"Comic Sans\",\"Marker Felt\";\n\t}\n</style>",
    "<script>\n\texport let players\n</script>\n<table>\n\t{#each players as p}\n\t\t<tr>\n\t\t\t<td>{p.name}</td>\n\t\t\t<td>{p.currentPosition}</td>\n\t\t</tr>\n\t{/each}\n</table>\n\n<style>\n\ttable {\n\t\tborder: 1px black solid;\n\t}\n</style>",
    "<script>\n\timport { slide } from 'svelte/transition'\n\texport let roster, teamName\n</script>\n\n<div class=\"roster\" transition:slide>\n\t<table class=\"roster-table\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th class='roster-header'>Golfer</th>\n                <th class='roster-header'>Proj. $</th>\n                <th class='roster-header'>Pos</th>\n                <th class='roster-header'>Total</th>\n                <th class='roster-header'>Today</th>\n                <th class='roster-header'>Thru</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{#each roster as player}\n\t\t\t\t<!-- {#if player.isPlaying} -->\n\t\t\t\t\t<tr class=\"player-row{player.isPlaying ? '' : ' inactive'}{player.secondTourney ? ' second-tourney' : ''}{' ' + player.pgaStatus}\">\n\t\t\t\t\t\t<td>{player.name}</td>\n\t                    <td>{player.position ? numeral(player.projMoney).format(\"$0,0\") : \"\"}</td>\n\t                    <td>{player.isPlaying ? (player.position ? player.position : (player.pgaStatus === \"wd\" ? \"WD\" : (player.pgaStatus == \"active\" ? \"\" : \"CUT\"))) : \"\"}</td>\n\t                    <td>{player.position ? (player.total ? player.total : \"E\") : \"\"}</td>\n\t                    <td>{player.today == null ? (player.pgaStatus == \"active\" ? player.firstRoundTeeTime : \"\") : (player.today != undefined ? (player.today == 0 ? \"E\" : player.today) : \"\")}</td>\n\t                    <td>{player.thru ? player.thru : \"\"}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t<!-- {/if} -->\n\t\t\t{/each}\n\t\t</tbody>\n\t</table>\n</div>\n\n<style>\n\t.roster {\n\t\tmargin-bottom: 10px;\n\t}\n\t.roster-table {\n\t\tmargin: 0 auto;\n\t\tborder-spacing: 0;\n\t    border-collapse: collapse;\n\t    width: 100%;\n\t}\n\t.roster-header {\n\t\tfont-family: \"Fjalla One\";\n\t    background-color: black;\n\t    color: white;\n\t    text-transform: uppercase;\n\t    font-size: 10px;\n\t    text-decoration: none;\n\n\t}\n\t.player-row {\n\t\tfont-size: 10px;\n\t\tfont-family: \"Roboto\";\n\t\tpadding: 5px;\n\t}\n\ttd {\n\t\tpadding: 5px;\n\t}\n\t.active {\n\t\tbackground-color: white;\n\t}\n\t.second-tourney {\n\t\tbackground-color: #fff2cc;\n\t}\n\t.cut {\n\t\tbackground-color: #ea9999;\n\t}\n\t.wd {\n\t\tbackground-color: #ea9999;\n\t}\n\t.inactive {\n\t\tbackground-color: #dedede;\n\t\tdisplay: none;\n\t}\n\t.favorite-button {\n\t\tmargin: 5px;\n\t}\n</style>",
    "<script>\n\timport Roster from \"./Roster.svelte\"\n\texport let team, placeNumber, isFavorite\n\t\n\t// let teamName = team.name\n\t// let teamNameNoOwner = team.teamName\n\t// let owner = team.owner\n\tlet pictureUrl = \"https://pga-tour-res.cloudinary.com/image/upload/c_fill,dpr_2.0,f_auto,g_face:center,h_45,q_auto,t_headshots_leaderboard_l,w_45/headshots_\" + team.roster[0].id + \".png\"\n    let rosterVisible = false\n    let dvLeague = window.location.href.includes(\"?league=dv\")\n\n    function toggleRoster() {\n    \trosterVisible = !rosterVisible\n    \tif (rosterVisible) {\n\t\t  \tga('send', {\n\t\t  \t\thitType: 'event',\n\t\t  \t\teventCategory: 'Weekly',\n\t\t  \t\teventAction: 'Click Team',\n\t\t  \t\teventLabel: team.name\n\t\t\t});\n    \t}\n  \n    }\n\n</script>\n\n\n<div class=\"team\">\n\t<div class=\"header\" on:click={toggleRoster}>\n\t\t<table border=\"0\" width=\"100%\">\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"standings-place-number\" width=\"15\">{placeNumber}</td>\n\t\t\t\t\t<td width=\"55\">\n\t\t\t\t\t\t<img class=\"player-photo\" src=\"{pictureUrl}\" width=\"45\" height=\"45\">\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"team-name {isFavorite ? \" favorite\" : \"\"}\">\n\t\t\t\t\t\t{team.teamName}\n\t\t\t\t\t\t<div class=\"owner {dvLeague ? \" invisible\" : \"\"}\">{team.owner}</div>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"team-earnings {isFavorite ? \" favorite\" : \"\"}\">\n\t\t\t\t\t\t{numeral(team.totalMoney).format('$0,0')}<br>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t{#if rosterVisible}\n\t\t<Roster roster={team.roster} teamName={team.teamName}></Roster>\n\t{/if}\n</div>\n\n\n<style>\n\t\n  \t.header {\n  \t\tpadding: 5px 2px;\n  \t}\n\t.standings-place-number {\n\t    color: black;\n\t    margin: 0px 5px;\n\t    /*padding-left: 5px;*/\n\t    font-size: 12px;\n\t    text-align: left;\n\t}\n\t.player-photo {\n    \tmargin-right: 8px;\n    \tmargin-left: 4px;\n \t}\n\t.team-name {\n\t    font-size: 16px;\n\t    margin: 0px 8px;\n\t    color: #46404A;\n\t    text-align: left;\n\t}\n\t.owner {\n\t    color: lightslategrey;\n\t    font-size: 12px;\n\t    font-family: \"Roboto\";\n\t}\n\t.team-earnings {\n\t    color: #46404A;\n\t    font-size: 16px;\n\t    padding: 0px 0px;\n\t    text-align: right;\n\t}\n\t.favorite {\n\t\tcolor: #de0000;\n\t}\n\t.invisible {\n\t\tdisplay: none;\n\t}\n</style>",
    "<script>\n\timport { slide } from 'svelte/transition'\n\texport let roster, teamName\n</script>\n\n<div class=\"roster\" transition:slide>\n\t<table class=\"roster-table\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th class='roster-header'>Golfer</th>\n                <th class='roster-header'><img src=\"https://www.fedex.com/etc.clientlibs/designs/fedex-common/images/resources/fx-favicon.ico\"></th>\n                <th class='roster-header'>Pos</th>\n                <th class='roster-header'>Total</th>\n                <th class='roster-header'>Today</th>\n                <th class='roster-header'>Thru</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{#each roster as player}\n\t\t\t\t<!-- {#if player.isPlaying} -->\n\t\t\t\t\t<tr class=\"player-row{player.isPlaying ? '' : ' inactive'}{player.secondTourney ? ' second-tourney' : ''}{' ' + player.pgaStatus}\">\n\t\t\t\t\t\t<td>{player.name}</td>\n\t                    <td>{player.position ? player.projMoney : \"\"}</td>\n\t                    <td>{player.isPlaying ? (player.position ? player.position : (player.pgaStatus === \"wd\" ? \"WD\" : (player.pgaStatus == \"active\" ? \"\" : \"CUT\"))) : \"\"}</td>\n\t                    <td>{player.position ? (player.total ? player.total : \"E\") : \"\"}</td>\n\t                    <td>{player.today != undefined ? (player.today == 0 ? \"E\" : player.today) : \"\"}</td>\n\t                    <td>{player.thru ? player.thru : \"\"}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t<!-- {/if} -->\n\t\t\t{/each}\n\t\t</tbody>\n\t</table>\n</div>\n\n<style>\n\t.roster {\n\t\tmargin-bottom: 10px;\n\t}\n\t.roster-table {\n\t\tmargin: 0 auto;\n\t\tborder-spacing: 0;\n\t    border-collapse: collapse;\n\t}\n\t.roster-header {\n\t\tfont-family: \"Fjalla One\";\n\t    border-bottom: 1px solid black;\n\t    text-transform: uppercase;\n\t    font-size: 10px;\n\t    text-decoration: none;\n\n\t}\n\t.player-row {\n\t\tfont-size: 10px;\n\t\tfont-family: \"Roboto\";\n\t\tpadding: 5px;\n\t}\n\ttd {\n\t\tpadding: 5px;\n\t}\n\t.active {\n\t\tbackground-color: white;\n\t}\n\t.second-tourney {\n\t\tbackground-color: #fff2cc;\n\t}\n\t.cut {\n\t\tbackground-color: #ea9999;\n\t}\n\t.wd {\n\t\tbackground-color: #ea9999;\n\t}\n\t.inactive {\n\t\tbackground-color: #dedede;\n\t\tdisplay: none;\n\t}\n\t.favorite-button {\n\t\tmargin: 5px;\n\t}\n</style>",
    "<script>\n\timport RosterTourChampionship from \"./RosterTourChampionship.svelte\"\n\texport let team, placeNumber, isFavorite\n\tlet id = team.id.$t.replace(\"https://spreadsheets.google.com/feeds/list/1YsZn_ovmbxOE8gUlmAT7z_nUv5mg9qRdwnNAX-lIrnI/2/public/full/\", \"\")\n\tlet teamName = team.gsx$team.$t\n\tlet teamNameNoOwner = team.gsx$teamname.$t\n\tlet owner = team.gsx$owner.$t\n\tlet pictureUrl = \"https://pga-tour-res.cloudinary.com/image/upload/c_fill,dpr_2.0,f_auto,g_face:center,h_45,q_auto,t_headshots_leaderboard_l,w_45/headshots_\" + team.roster[0].id + \".png\"\n    let rosterVisible = false\n\n\n    function toggleRoster() {\n    \trosterVisible = !rosterVisible\n    \tif (rosterVisible) {\n\t\t  \tga('send', {\n\t\t  \t\thitType: 'event',\n\t\t  \t\teventCategory: 'Weekly',\n\t\t  \t\teventAction: 'Click Team',\n\t\t  \t\teventLabel: teamName\n\t\t\t});\n    \t}\n  \n    }\n\n</script>\n\n\n<div class=\"team\">\n\t<div class=\"header\" on:click={toggleRoster}>\n\t\t<table border=\"0\" width=\"100%\">\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"standings-place-number\" width=\"15\">{placeNumber}</td>\n\t\t\t\t\t<td width=\"55\">\n\t\t\t\t\t\t<img class=\"player-photo\" src=\"{pictureUrl}\" width=\"45\" height=\"45\">\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"team-name {isFavorite ? \" favorite\" : \"\"}\">\n\t\t\t\t\t\t{teamNameNoOwner}\n\t\t\t\t\t\t<div class=\"owner {isFavorite ? \" favorite\" : \"\"}\">{owner}</div>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"team-earnings {isFavorite ? \" favorite\" : \"\"}\">\n\t\t\t\t\t\t<img src=\"https://www.fedex.com/etc.clientlibs/designs/fedex-common/images/resources/fx-favicon.ico\"><br>{team.totalMoney}\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t{#if rosterVisible}\n\t\t<RosterTourChampionship roster={team.roster} teamName={teamName}></RosterTourChampionship>\n\t{/if}\n</div>\n\n\n<style>\n\t\n  \t.header {\n  \t\tpadding: 5px 2px;\n  \t}\n\t.standings-place-number {\n\t    color: black;\n\t    margin: 0px 5px;\n\t    /*padding-left: 5px;*/\n\t    font-size: 12px;\n\t    text-align: left;\n\t}\n\t.player-photo {\n    \tmargin-right: 8px;\n    \tmargin-left: 4px;\n \t}\n\t.team-name {\n\t    font-size: 16px;\n\t    margin: 0px 8px;\n\t    color: #46404A;\n\t    text-align: left;\n\t}\n\t.owner {\n\t    color: lightslategrey;\n\t    font-size: 12px;\n\t    font-family: \"Roboto\";\n\t}\n\t.team-earnings {\n\t    color: #46404A;\n\t    font-size: 16px;\n\t    padding: 0px 0px;\n\t    text-align: right;\n\t    line-height: 0.1;\n\t}\n\t.favorite {\n\t\tcolor: #de0000;\n\t}\n</style>",
    "<script>\n  \timport { onMount } from \"svelte\"\n\timport TeamTourChampionship from \"./TeamTourChampionship.svelte\"\n\timport moment from \"moment\"\n\tlet teams, tourneyName, leaderboard, favoriteTeam\n\t\n\t// onMount do all of our async functions\n\tonMount(async () => {\n\n\t\tif (document.cookie.split('; ').find(row => row.startsWith('favoriteTeam'))) {\n\t\t\tfavoriteTeam = document.cookie.split('; ').find(row => row.startsWith('favoriteTeam')).split('=')[1];\t\n\t\t}\n\t\telse {\n\t\t\tfavoriteTeam = \"\"\n\t\t}\n\t\t\n\t\tconst tourneyIds = await getRelevantTournament()\n\t\tconst rawTeams = await getTeamRosters()\n\n\t\tconst firstTourneyTeams = processTeams(rawTeams, await getPgaStandings(tourneyIds[0]))\n\n\t\t// If there's more than 1 tournament then we need to process the 2nd one also\n\t\tif (tourneyIds.length > 1) {\n\t\t\tconst secondTourneyTeams = await processSecondTourney(tourneyIds[1], firstTourneyTeams)\n\t\t\tteams = await sortTeams(secondTourneyTeams)\n\t\t}\n\t\telse {\n\t\t\tteams = sortTeams(firstTourneyTeams)\n\t\t}\n\t\t\n\t\t\n\t\t\n\t})\n\tfunction setFavorite(message) {\n    \tdocument.cookie = \"favoriteTeam=\" + message\n    \tfavoriteTeam = message\n    \tga('send', {\n\t\t  \t\thitType: 'event',\n\t\t  \t\teventCategory: 'Weekly',\n\t\t  \t\teventAction: 'Favorite',\n\t\t  \t\teventLabel: teamName\n\t\t\t});\n    }\n    const processSecondTourney = async (tourneyId, firstTourneyTeams) => {\n    \tconst standings = await getPgaStandings(tourneyId)\n    \tawait firstTourneyTeams.forEach((team) => {\n    \t\tteam.roster.forEach((player) => {\n    \t\t\tconst pgaPlayerMatches = standings.filter(p => p.player_id === player.id)\n    \t\t\tif (pgaPlayerMatches.length > 0) {\n\t\t\t\t\t\tplayer.isPlaying = true\n\t\t\t\t\t\tconst pgaPlayer = pgaPlayerMatches[0]\n\t\t\t\t\t\tplayer.name = pgaPlayer.player_bio.first_name + ' ' + pgaPlayer.player_bio.last_name\n\t\t\t\t\t\tplayer.positionNum = parseInt(pgaPlayer.current_position.replace(/\\D/g,''))\n\t\t\t\t\t\tplayer.position = pgaPlayer.current_position\n\t\t\t\t\t\tplayer.projMoney = pgaPlayer.rankings.projected_money_event\n\t\t\t\t\t\tplayer.projCupPoints = pgaPlayer.rankings.projected_cup_points_event\n\t\t\t\t\t\tplayer.today = pgaPlayer.today\n\t\t\t\t\t\tplayer.thru = pgaPlayer.thru\n\t\t\t\t\t\tplayer.total = pgaPlayer.total\n\t\t\t\t\t\tplayer.total_strokes = pgaPlayer.total_strokes\n\t\t\t\t\t\tplayer.playerId = pgaPlayer.player_id\n\t\t\t\t\t\tplayer.pgaStatus = pgaPlayer.status\n\t\t\t\t\t\tteam.totalMoney += pgaPlayer.rankings.projected_cup_points_event\n\t\t\t\t\t\tplayer.sort = isNaN(player.positionNum) ? -1 : parseInt(player.projCupPoints)\n\t\t\t\t\t\tplayer.secondTourney = true\n\t\t\t\t\t\tplayer.firstRoundTeeTime = moment(pgaPlayer.rounds[0].tee_time).format(\"h:mm a\")\n\t\t\t\t\t\t\n\t\t\t\t\t}\n    \t\t})\n    \t})\n    \treturn firstTourneyTeams    \t\n    }\n    const sortTeams  = (rawTeams) => {\n    \tconst sortedTeams = rawTeams.sort((a,b) => {\n\t\t\treturn a.totalMoney > b.totalMoney ? -1 : a.totalMoney < b.totalMoney ? 1 : 0\n\t\t})\n\t\tsortedTeams.forEach( (team) => {\n\t\t\tconst sortedRoster = team.roster.sort((a, b) => (a.sort < b.sort) ? 1 : -1)\n\t\t\tteam.roster = sortedRoster\n\t\t})\n\t\treturn rawTeams\n    }\n\tconst processTeams = (rawTeams, pgaStanding) => {\n\t\trawTeams.forEach((team) => {\n\t\t\t  team.processed = true\n\t\t\t  team.roster = []\n\t\t\t  team.totalMoney = 0.0\n\t\t\t  if (team.gsx$roster.$t != undefined) {\n\t\t\t\t\tJSON.parse(team.gsx$roster.$t).forEach((player) => {\n\t\t\t\t\t\tconst pgaPlayerMatches = pgaStanding.filter(p => p.player_id === player.id)\n\t\t\t\t\t\tif (pgaPlayerMatches.length > 0) {\n\t\t\t\t\t\t\tplayer.isPlaying = true\n\t\t\t\t\t\t\tconst pgaPlayer = pgaPlayerMatches[0]\n\t\t\t\t\t\t\tplayer.name = pgaPlayer.player_bio.first_name + ' ' + pgaPlayer.player_bio.last_name,\n\t\t\t\t\t\t\tplayer.positionNum = parseInt(pgaPlayer.current_position.replace(/\\D/g,'')),\n\t\t\t\t\t\t\tplayer.position = pgaPlayer.current_position,\n\t\t\t\t\t\t\tplayer.projMoney = pgaPlayer.rankings.projected_cup_points_event,\n\t\t\t\t\t\t\tplayer.today = pgaPlayer.today,\n\t\t\t\t\t\t\tplayer.thru = pgaPlayer.thru,\n\t\t\t\t\t\t\tplayer.total = pgaPlayer.total_strokes,\n\t\t\t\t\t\t\tplayer.playerId = pgaPlayer.player_id,\n\t\t\t\t\t\t\tplayer.pgaStatus = pgaPlayer.status,\n\t\t\t\t\t\t\tteam.totalMoney += pgaPlayer.rankings.projected_cup_points_event,\n\t\t\t\t\t\t\tplayer.secondTourney = false\n\t\t\t\t\t\t}\n\t\t\t\t\t\tteam.roster.push(player)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t})\n\t\trawTeams.forEach((team) => {\n\t\t\tteam.roster.forEach((player) => {\n\t\t\t\tif (player.isPlaying === undefined) {\n\t\t\t\t\tplayer.isPlaying = false\n\t\t\t\t\t// If not playing put at bottom of list\n\t\t\t\t\tplayer.sort = -2\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (isNaN(player.positionNum)) {\n\t\t\t\t\t\t// Next up is cut players\n\t\t\t\t\t\tplayer.sort = -1\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Then sort by projected money\n\t\t\t\t\t\tplayer.sort = parseInt(player.projMoney)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\treturn rawTeams\n\t}\n\t\n\t// Hit the google sheet for the schedule\n\tconst getRelevantTournament = async () => {\n\t\t// const response = await fetch(`https://spreadsheets.google.com/feeds/list/1YsZn_ovmbxOE8gUlmAT7z_nUv5mg9qRdwnNAX-lIrnI/1/public/full?alt=json`)\n\t\tconst response = await fetch(`https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/schedule?timestamp=` + Date.now())\n\t\t\n\t\tconst data = await response.json()\n\t\tconst today = new Date()\n\t\tconst tourneysBeforeToday = data.feed.entry.filter(event => new Date(Date.parse(event.gsx$date.$t)) <= today.setHours(0,0,0,0))\n\t\t\n\t\tconst tourneyIds = []\n\t\tconst tourneyNames = []\n\t\t// grab the last tournament but check if any others have the same date\n\t\ttourneysBeforeToday.forEach((t) => {\n\t\t\tif (tourneysBeforeToday.slice(-1)[0].gsx$date.$t === t.gsx$date.$t) {\n\t\t\t\ttourneyIds.push(t.gsx$tournamentid.$t)\n\t\t\t\ttourneyNames.push(t.gsx$name.$t)\n\t\t\t}\n\t\t})\n\t\ttourneyName = tourneyNames.join(\" / \")\n\t\treturn tourneyIds;\n\t}\n\t\n\tconst getPgaStandings = async (tourneyIds) => {\n\t\t\t// Hit KVDB to get our security blurb so we can call the PGA method\n\t\t\tconst response = await fetch(`https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/pgasecurityblurb?timestamp=\"` + Date.now());\n\t\t\tconst securityBlurb = await response.text()\n\t\t\t// This is where we hit the PGA\n\t\t\treturn makePgaCall(securityBlurb, tourneyIds);\n\t}\n\t\n\tconst makePgaCall = async (securityBlurb, tourneyId) => {\n\t\t\tconst pgaResp = await fetch(\"https://statdata.pgatour.com/r/\" + tourneyId + \"/2020/leaderboard-v2.json\" + securityBlurb + \"&timestamp=\" + Date.now());\n\t\t\tconst jsonResp = await pgaResp.json()\n\t\t\tleaderboard = await jsonResp.leaderboard.players\n\t\t\treturn jsonResp.leaderboard.players\n\t}\n\t\n\t// This one gets our team rosters from the Google Sheet\n\tconst getTeamRosters = async () => {\n\t\t// const response = await fetch(`https://spreadsheets.google.com/feeds/list/1YsZn_ovmbxOE8gUlmAT7z_nUv5mg9qRdwnNAX-lIrnI/2/public/full?alt=json`)\n\t\tconst response = await fetch(`https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/rosters`)\n\t\tconst data = await response.json()\n\t\treturn await data.feed.entry.filter(e => e.gsx$roster.$t)\n\t}\n</script>\n\n<div width=\"100%\" style=\"background-color: lightgrey; padding: 5px;\">\n\t<h3>It's the tour championship! This week doesn't count, but here's what it would look like if it did....</h3>\n\n</div>\n{#if tourneyName}\n\t<h1 class=\"tourney-name\">{tourneyName}</h1>\n{:else}\n\t<img class=\"sheets-icon\" src=\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_spreadsheet_x32.png\" alt=\"Loading\"><span>&nbsp;Loading current tournament</span>\n{/if}\n\n<!-- {#if leaderboard}\n\t<Leaderboard leaderboard={leaderboard}></Leaderboard>\t\n{/if} -->\n\n\n<div class=\"teams\">\n\t{#if teams}\n\t\t{#each teams as team, i}\n\t\t\t<table class=\"team\" width=\"100%\" border=\"0\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"favorite-cell\" width=\"30\">\n\t\t\t\t\t\t<span class=\"favorite-button\" on:click={setFavorite(team.gsx$team.$t)}>\n\t\t\t\t\t\t{#if favoriteTeam === team.gsx$team.$t}\n\t\t\t\t\t\t\t<span style=\"font-size: 10px;\">❤️</span>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<span style=\"font-size: 13px;color: #969494;\">♡</span>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</span>\t\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<TeamTourChampionship team={team} placeNumber={i+1} isFavorite={favoriteTeam === team.gsx$team.$t}></TeamTourChampionship>\t\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t  \t{/each}\n\t{:else}\n\t\t<img class=\"sheets-icon\" src=\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_spreadsheet_x32.png\" alt=\"Loading\"><span>&nbsp;Loading teams and standings</span>\n\t{/if}\n</div>\n\n\n<style>\n\t.tourney-name {\n\t  font-size: 18px;\n\t  text-align: center;\n\t  text-transform: uppercase;\n\t  margin-bottom: 5px;\n\t  font-weight: normal;\n\t}\n\t.panel-group {\n\t    margin-bottom: 20px;\n\t\tborder-radius: 4px;\n\t}\n\t.team {\n    \tmargin: 5px 0px;\n    \tborder-radius: 4px;\n    \tborder: 1px solid #ddd;\n    \tbackground-color: white;\n  \t}\n  \t.favorite-cell {\n  \t\tvertical-align: top;\n  \t\tpadding-top: 22px;\n  \t}\n</style>",
    "<script>\n  \timport { onMount } from \"svelte\"\n\timport Team from \"./Team.svelte\"\n\timport moment from \"moment\"\n\timport ResultsTable from \"./ResultsTable.svelte\"\n\tlet teams, tourneyName, leaderboard, favoriteTeam, blurb\n\tlet resultsPlayers = []\n\texport let nate = window.location.search.indexOf(\"nate\") != -1\n\tlet trueUrl = window.location.href.replace(\"?league=dv\", \"\")\n\tlet rawResults = window.location.href.includes(\"results\")\n\tlet error\n\t// onMount do all of our async functions\n\tonMount(async () => {\n\n\t\ttry {\n\t\t\tconst tournaments = await getRelevantTournament()\n\t\t\tconst rawTeams = await getTeamRosters()\n\t\t\t\n\t\t\t// if (tournaments[0].id == \"018\") {\n\t\t\t// \tprocessTeamTournament(tournaments[0])\n\t\t\t// }\n\t\t\t// else {\n\t\t\t\t// \n\t\t\t// }\n\t\t\t\n\t\t\tconst firstTourneyTeams = processFirstTourney(rawTeams, await getPgaStandings(tournaments[0]))\t\n\t\t\t\n\t\t\t// If there's more than 1 tournament then we need to process the 2nd one also\n\t\t\tif (tournaments.length > 1) {\n\t\t\t\tconst secondTourneyTeams = await processSecondTourney(tournaments[1], firstTourneyTeams)\n\t\t\t\tteams = await sortTeams(secondTourneyTeams)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tteams = sortTeams(firstTourneyTeams)\n\t\t\t}\n\t\t}\n\t\tcatch (e) {\n\t\t\terror = e\n\t\t}\n\t\t\n\t})\n\n\n\t// Hit the google sheet for the schedule\n\tconst getRelevantTournament = async () => {\n\t\t\t\t\n\t\t// const endpoint = `https://docs.google.com/spreadsheets/d/1lNeLG3zTCsDr7KvKJNky1maiUNVoEqapj-LCt8G9Z7Q/gviz/tq?tqx=out:json&tq&gid=61191989`\n\t\tconst endpoint = `https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/schedule` + \"?timestamp=\" + Date.now()\n\t\tconst response = await fetch(endpoint)\n\t\tconst text = await response.text()\n\t\tconst data = await JSON.parse(text.substring(47).slice(0, -2)).table\n  \t\tconst today = new Date()\n  \t\t\n  \t\tconst tourneysBeforeToday = data.rows.filter(event => new Date(Date.parse(event.c[1].f)) < today.setHours(0,0,0,0))\n  \t\tconst tournaments = []\n  \t\tconst payoutPercentages = [null, 0.18,0.109,0.069,0.049,0.041,0.03625,0.03375,0.03125,0.02925,0.02725,0.02525,0.02325,0.02125,0.01925,0.01825,0.01725,0.01625,0.01525,0.01425,0.01325,0.01225,0.01125,0.01045,0.00965,0.00885,0.00805,0.00775,0.00745,0.00715,0.00685,0.00655,0.00625,0.00595,0.0057,0.00545,0.0052,0.00495,0.00475,0.00455,0.00435,0.00415,0.00395,0.00375,0.00355,0.00335,0.00315,0.00295,0.00279,0.00265,0.00257,0.00251,0.00245,0.00241,0.00237,0.00235,0.00233,0.00231,0.00229,0.00227,0.00225,0.00223,0.00221,0.00219,0.00217,0.00215]\n  \t\t// grab the last tournament but check if any others have the same date\n  \t\ttourneysBeforeToday.forEach((t) => {\n\t\t\tif (tourneysBeforeToday.slice(-1)[0].c[1].f === t.c[1].f) {\n\t\t\n\t\t\t\ttournaments.push(\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": t.c[2].v,\n\t\t\t\t\t\t\"name\": t.c[0].v,\n\t\t\t\t\t\t\"totalPurse\": t.c[3].v / 0.18,\n\t\t\t\t\t\t\"payouts\": payoutPercentages.map((n) => n * (t.c[3].v / 0.18))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t\ttourneyName = tournaments.map((t) => t.name).join(\" / \")\n\n\t\treturn tournaments;\n\t}\n\n    // Once we have the PGA Standings, process our first Tournament\n\tconst processFirstTourney = (rawTeams, pgaStanding) => {\n\t\t\n\t\trawTeams.forEach((team) => {\n\t\t\t\tteam.processed = true\n\t\t\t\tteam.totalMoney = 0.0\n\t\t\t\tteam.roster.forEach((player) => {\n\t\t\t\t\tconst pgaPlayerMatches = pgaStanding.filter(p => p.playerId === player.id)\n\t\t\t\t\tif (pgaPlayerMatches.length > 0) {\n\t\t\t\t\t\tplayer.isPlaying = true\n\t\t\t\t\t\tconst pgaPlayer = pgaPlayerMatches[0]\n\t\t\t\t\t\tplayer.name = pgaPlayer.playerNames.firstName + ' ' + pgaPlayer.playerNames.lastName,\n\t\t\t\t\t\tplayer.positionNum = parseInt(pgaPlayer.positionCurrent.replace(/\\D/g,'')),\n\t\t\t\t\t\tplayer.position = pgaPlayer.positionCurrent,\n\t\t\t\t\t\tplayer.projMoney = pgaPlayer.projected_money_event,\n\t\t\t\t\t\tplayer.today = pgaPlayer.round,\n\t\t\t\t\t\tplayer.thru = pgaPlayer.thru,\n\t\t\t\t\t\tplayer.total = pgaPlayer.total,\n\t\t\t\t\t\tplayer.playerId = pgaPlayer.playerId,\n\t\t\t\t\t\tplayer.pgaStatus = pgaPlayer.status,\n\t\t\t\t\t\tteam.totalMoney += pgaPlayer.projected_money_event,\n\t\t\t\t\t\tplayer.secondTourney = false,\n\t\t\t\t\t\tplayer.firstRoundTeeTime = moment(pgaPlayer.tee_time).format(\"h:mm a\")\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t})\n\t\trawTeams.forEach((team) => {\n\t\t\tteam.roster.forEach((player) => {\n\t\t\t\tif (player.isPlaying === undefined) {\n\t\t\t\t\tplayer.isPlaying = false\n\t\t\t\t\t// If not playing put at bottom of list\n\t\t\t\t\tplayer.sort = -2\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (isNaN(player.positionNum)) {\n\t\t\t\t\t\t// Next up is cut players\n\t\t\t\t\t\tplayer.sort = -1\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Then sort by projected money\n\t\t\t\t\t\tplayer.sort = parseInt(player.projMoney)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\treturn rawTeams\n\t}\n\n    const processSecondTourney = async (tourneyId, firstTourneyTeams) => {\n    \tconst standings = await getPgaStandings(tourneyId)\n    \tawait firstTourneyTeams.forEach((team) => {\n    \t\tteam.roster.forEach((player) => {\n    \t\t\tconst pgaPlayerMatches = standings.filter(p => p.playerId === player.id)\n    \t\t\tif (pgaPlayerMatches.length > 0) {\n\t\t\t\t\t\tplayer.isPlaying = true\n\t\t\t\t\t\tconst pgaPlayer = pgaPlayerMatches[0]\n\t\t\t\t\t\tplayer.name = pgaPlayer.playerNames.firstName + ' ' + pgaPlayer.playerNames.lastName,\n\t\t\t\t\t\tplayer.positionNum = parseInt(pgaPlayer.positionCurrent.replace(/\\D/g,'')),\n\t\t\t\t\t\tplayer.position = pgaPlayer.positionCurrent,\n\t\t\t\t\t\tplayer.projMoney = pgaPlayer.projected_money_event,\n\t\t\t\t\t\tplayer.today = pgaPlayer.round,\n\t\t\t\t\t\tplayer.thru = pgaPlayer.thru,\n\t\t\t\t\t\tplayer.total = pgaPlayer.total,\n\t\t\t\t\t\tplayer.playerId = pgaPlayer.playerId,\n\t\t\t\t\t\tplayer.pgaStatus = pgaPlayer.status,\n\t\t\t\t\t\tteam.totalMoney += pgaPlayer.projected_money_event,\n\t\t\t\t\t\tplayer.secondTourney = true,\n\t\t\t\t\t\tplayer.firstRoundTeeTime = moment(pgaPlayer.tee_time).format(\"h:mm a\")\n\t\t\t\t\t}\n    \t\t})\n    \t})\n    \tawait firstTourneyTeams.forEach((team) => {\n\t\t\tteam.roster.forEach((player) => {\n\t\t\t\tif (player.isPlaying === undefined) {\n\t\t\t\t\tplayer.isPlaying = false\n\t\t\t\t\t// If not playing put at bottom of list\n\t\t\t\t\tplayer.sort = -2\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (isNaN(player.positionNum)) {\n\t\t\t\t\t\t// Next up is cut players\n\t\t\t\t\t\tplayer.sort = -1\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Then sort by projected money\n\t\t\t\t\t\tplayer.sort = parseInt(player.projMoney)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n    \treturn firstTourneyTeams    \t\n    }\n\n    // Sort by total money for standings\n    const sortTeams  = (rawTeams) => {\n    \tconst sortedTeams = rawTeams.sort((a,b) => {\n\t\t\treturn a.totalMoney > b.totalMoney ? -1 : a.totalMoney < b.totalMoney ? 1 : 0\n\t\t})\n\t\tsortedTeams.forEach( (team) => {\n\t\t\tconst sortedRoster = team.roster.sort((a, b) => (a.sort < b.sort) ? 1 : -1)\n\t\t\tteam.roster = sortedRoster\n\t\t})\n\t\treturn rawTeams\n    }\n\t\n\tconst getPgaStandings = async (tournament) => {\n\t\t\t// Hit KVDB to get our security blurb so we can call the PGA method\n\t\t\tconst response = await fetch(`https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/pgasecurityblurb?timestamp=` + Date.now())\n\t\t\tconst securityBlurb = await response.text()\n\t\t\tblurb = await securityBlurb\n\t\t\treturn makePgaCall(securityBlurb, tournament)\n\t}\n\t\n\tconst makePgaCall = async (securityBlurb, tournament) => {\n\t\t\tif (tournament.id != \"018\")\n\t\t\t{\n\t\t\t\tconst pgaResp = await fetch(\"https://lbdata.pgatour.com/2022/r/\" + tournament.id + \"/leaderboard.json\" + securityBlurb + \"&timestamp=\" + Date.now());\n\t\t\t\tvar jsonResp = await pgaResp.json()\n\t\t\t\tleaderboard = await jsonResp.rows\n\t\t\t}\n\t\t\telse {\n\t\t\t\tleaderboard = await makePgaCallTeamTourney(securityBlurb,tournament)\n\t\t\t\tconsole.log(leaderboard)\n\t\t\t}\n\t\t\tvar numberPlayersEachPlace = {\"1\": [0, 0],\"2\": [0, 0],\"3\": [0, 0],\"4\": [0, 0],\"5\": [0, 0],\"6\": [0, 0],\"7\": [0, 0],\"8\": [0, 0],\"9\": [0, 0],\"10\": [0, 0],\"11\": [0, 0],\"12\": [0, 0],\"13\": [0, 0],\"14\": [0, 0],\"15\": [0, 0],\"16\": [0, 0],\"17\": [0, 0],\"18\": [0, 0],\"19\": [0, 0],\"20\": [0, 0],\"21\": [0, 0],\"22\": [0, 0],\"23\": [0, 0],\"24\": [0, 0],\"25\": [0, 0],\"26\": [0, 0],\"27\": [0, 0],\"28\": [0, 0],\"29\": [0, 0],\"30\": [0, 0],\"31\": [0, 0],\"32\": [0, 0],\"33\": [0, 0],\"34\": [0, 0],\"35\": [0, 0],\"36\": [0, 0],\"37\": [0, 0],\"38\": [0, 0],\"39\": [0, 0],\"40\": [0, 0],\"41\": [0, 0],\"42\": [0, 0],\"43\": [0, 0],\"44\": [0, 0],\"45\": [0, 0],\"46\": [0, 0],\"47\": [0, 0],\"48\": [0, 0],\"49\": [0, 0],\"50\": [0, 0],\"51\": [0, 0],\"52\": [0, 0],\"53\": [0, 0],\"54\": [0, 0],\"55\": [0, 0],\"56\": [0, 0],\"57\": [0, 0],\"58\": [0, 0],\"59\": [0, 0],\"60\": [0, 0],\"61\": [0, 0],\"62\": [0, 0],\"63\": [0, 0],\"64\": [0, 0],\"65\": [0, 0],\"66\": [0, 0],\"67\": [0, 0],\"68\": [0, 0],\"69\": [0, 0],\"70\": [0, 0],\"71\": [0, 0],\"72\": [0, 0],\"73\": [0, 0],\"74\": [0, 0],\"75\": [0, 0],\"76\": [0, 0],\"77\": [0, 0],\"78\": [0, 0],\"79\": [0, 0],\"80\": [0, 0],\"81\": [0, 0],\"82\": [0, 0],\"83\": [0, 0],\"84\": [0, 0],\"85\": [0, 0],\"86\": [0, 0],\"87\": [0, 0],\"88\": [0, 0],\"89\": [0, 0],\"90\": [0, 0],\"91\": [0, 0],\"92\": [0, 0],\"93\": [0, 0],\"94\": [0, 0],\"95\": [0, 0],\"96\": [0, 0],\"97\": [0, 0],\"98\": [0, 0],\"99\": [0, 0],\"100\": [0, 0],\"101\": [0, 0],\"102\": [0, 0],\"103\": [0, 0],\"104\": [0, 0],\"105\": [0, 0],\"106\": [0, 0],\"107\": [0, 0],\"108\": [0, 0],\"109\": [0, 0],\"110\": [0, 0],\"111\": [0, 0],\"112\": [0, 0],\"113\": [0, 0],\"114\": [0, 0],\"115\": [0, 0],\"116\": [0, 0],\"117\": [0, 0],\"118\": [0, 0],\"119\": [0, 0],\"120\": [0, 0],\"121\": [0, 0],\"122\": [0, 0],\"123\": [0, 0],\"124\": [0, 0],\"125\": [0, 0],\"126\": [0, 0],\"127\": [0, 0],\"128\": [0, 0],\"129\": [0, 0],\"130\": [0, 0],\"131\": [0, 0],\"132\": [0, 0],\"133\": [0, 0],\"134\": [0, 0],\"135\": [0, 0],\"136\": [0, 0],\"137\": [0, 0],\"138\": [0, 0],\"139\": [0, 0],\"140\": [0, 0],\"141\": [0, 0],\"142\": [0, 0],\"143\": [0, 0],\"144\": [0, 0],\"145\": [0, 0],\"146\": [0, 0],\"147\": [0, 0],\"148\": [0, 0],\"149\": [0, 0],\"150\": [0, 0],\"151\": [0, 0],\"152\": [0, 0],\"153\": [0, 0],\"154\": [0, 0],\"155\": [0, 0],\"156\": [0, 0],\"157\": [0, 0],\"158\": [0, 0],\"159\": [0, 0],\"160\": [0, 0],\"161\": [0, 0],\"162\": [0, 0],\"163\": [0, 0],\"164\": [0, 0],\"165\": [0, 0],\"166\": [0, 0],\"167\": [0, 0],\"168\": [0, 0],\"169\": [0, 0],\"170\": [0, 0],\"171\": [0, 0],\"172\": [0, 0],\"173\": [0, 0],\"174\": [0, 0],\"175\": [0, 0],\"176\": [0, 0],\"177\": [0, 0],\"178\": [0, 0],\"179\": [0, 0],\"180\": [0, 0],\"181\": [0, 0],\"182\": [0, 0],\"183\": [0, 0],\"184\": [0, 0],\"185\": [0, 0],\"186\": [0, 0],\"187\": [0, 0],\"188\": [0, 0],\"189\": [0, 0],\"190\": [0, 0],\"191\": [0, 0],\"192\": [0, 0],\"193\": [0, 0],\"194\": [0, 0],\"195\": [0, 0],\"196\": [0, 0],\"197\": [0, 0],\"198\": [0, 0],\"199\": [0, 0],\"200\": [0, 0]}\n\t\t\t\n\n\t\t\tawait leaderboard.forEach((player) => {\n\t\t\t\tvar positionNum = parseInt(player.positionCurrent.replace(/\\D/g,''))\n\t\t\t\tif (!isNaN(positionNum) && positionNum > 0) {\n\t\t\t\t\tnumberPlayersEachPlace[positionNum + \"\"][0] += 1\n\t\t\t\t}\n\t\t\t})\n\n\n\t\t\tawait tournament.payouts.forEach((p,i)=> {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tvar numPlayersTiedAtPosition = \tnumberPlayersEachPlace[i + \"\"][0] \n\t\t\t\t\tvar totalPayout = 0\n\t\t\t\t\tif (numPlayersTiedAtPosition > 1) {\n\t\t\t\t\t\t// Add the money from the people who are tied...\n\t\t\t\t\t\tfor (let step = i; step < (i + numPlayersTiedAtPosition); step++) {\n  \t\t\t\t\t\t\ttotalPayout += tournament.payouts[step] ? tournament.payouts[step] : 0\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttotalPayout = tournament.payouts[i]\n\t\t\t\t\t}\n\t\t\t\t\tnumberPlayersEachPlace[i + \"\"][1] = 1.0 * totalPayout / numPlayersTiedAtPosition\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tawait leaderboard.forEach((player) => {\n\t\t\t\t\t// Do the math manually. Get the positionNum and then payouts[n-1] = payout \n\t\t\t\t\tvar positionNum = parseInt(player.positionCurrent.replace(/\\D/g,''))\n\t\t\t\t\tvar numGolfersToSplit = numberPlayersEachPlace[positionNum + \"\"]\n\t\t\t\t\t// if there's a payout (above 65) else 0\n\t\t\t\t\tplayer.projected_money_event = numberPlayersEachPlace[positionNum] ? numberPlayersEachPlace[positionNum][1] : 0\n\n\t\t\t})\n\t\t\t// await console.log(numberPlayersEachPlace)\n\t\t\treturn leaderboard\n\t}\n\n\tconst makePgaCallTeamTourney  = async (securityBlurb, tournament) => {\n\t\tconst pgaResp = await fetch(\"https://statdata.pgatour.com/r/\" + tournament.id + \"/teamleaderboard-v2.json\" + securityBlurb + \"&timestamp=\" + Date.now());\n\t\tvar jsonResp = await pgaResp.json()\n\t\tleaderboard = await jsonResp.leaderboard\n\t\tvar processedResponse = []\n\t\tleaderboard.teams.forEach((t)=> {\n\t\t\tt.teamPlayers.forEach((p => {\n\t\t\t\tp.isActive = true\n\t\t\t\tp.status = \"active\"\n\t\t\t\tp.playerId = p.pid\n\t\t\t\tp.positionCurrent = t.current_position\n\t\t\t\tp.total = t.total\n\t\t\t\tp.thru = t.thru\n\t\t\t\tp.round = t.today\n\n\t\t\t\tif (p.firstName + \" \" + p.lastName == t.teamPlayers[0].firstName + \" \" + t.teamPlayers[0].lastName) {\n\t\t\t\t\tp.playerNames = {\n\t\t\t\t\t\t\"firstName\": \"🏌️‍♂️\" + t.teamPlayers[0].firstName + \" \" + t.teamPlayers[0].lastName + \" / \",\n\t\t\t\t\t\t\"lastName\": t.teamPlayers[1].firstName + \" \" + t.teamPlayers[1].lastName\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tp.playerNames = {\n\t\t\t\t\t\t\"firstName\": t.teamPlayers[0].firstName + \" \" + t.teamPlayers[0].lastName + \" / \",\n\t\t\t\t\t\t\"lastName\": \"🏌️‍♂️\" + t.teamPlayers[1].firstName + \" \" + t.teamPlayers[1].lastName\n\t\t\t\t\t}\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tprocessedResponse.push(p)\n\t\t\t}))\n\t\t})\n\t\t// console.log(processedResponse)\n\t\treturn processedResponse\n\t}\n\t\n\t// Get our team rosters from the Google Sheet / KVDB\n\tconst getTeamRosters = async () => {\n\t\t\n\t\t\n\t\tlet spreadsheet_id = \"1YsZn_ovmbxOE8gUlmAT7z_nUv5mg9qRdwnNAX-lIrnI\"\n\t\tlet gid = \"629583302\"\n\t\t\n\t\t// if (nate) {\n\t\t// \tspreadsheet_id = \"1Ur-zgH5O5iwTJ3J5pUXT-hu1irNo9W5NfJwWa5RxiW0\"\n\t\t// }\n\t\t\n\t\t// let endpoint = `https://docs.google.com/spreadsheets/d/`+ spreadsheet_id + `/gviz/tq?tqx=out:json&tq&gid=` + gid\n\t\tlet endpoint = \"https://kvdb.io/vRrcDLPTr4WWpVTJxim1H/rosters\" + \"?timestamp=\" + Date.now()\n\t\tconst response = await fetch(endpoint)\n\t\tconst text = await response.text()\n\t\tconst data = await JSON.parse(text.substring(47).slice(0, -2)).table\n\t\t\n\t\tconst cols = data.cols.map((col) => col.label)\n\t\t\n\t\t// Grab all the players\n\t\tconst players = []\n\t\tdata.rows.forEach((row) => {\n\t\t\tconst obj = {}\n\t\t\tcols.forEach((col, i) => {\n\t\t\t\tobj[col] = row.c[i] == null ? null : row.c[i].v\n\t\t\t})\n\t\t\tif (obj[\"Team\"] != null) {\n\t\t\t\tplayers.push(obj)\t\n\t\t\t}\n\t\t})\n\t\t\n\t\t// Get unique team names\n\t\tlet teamNames = [...new Set(players.map((p) => p.Team))]\n\t\t// Assign rosters to teams\n\t\tlet teams = []\n\t\tteamNames.forEach((team) => {\n\t\t\tlet obj = {\n\t\t\t\t\"teamName\": team.replace(\")\", \"\").split(\" (\")[0],\n\t\t\t\t\"owner\": team.replace(\")\", \"\").split(\" (\")[1],\n\t\t\t\t\"roster\": []\n\t\t\t}\n\t\t\tplayers.forEach((player) => {\n\t\t\t\tif (player.Team == team) {\n\t\t\t\t\tobj.roster.push({\n\t\t\t\t\t\t\"id\": player.PGAID + \"\",\n\t\t\t\t\t\t\"name\": player.Golfers\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\tteams.push(obj)\n\t\t})\n\n\t\treturn teams\t\t\n\t}\n\n</script>\n\n\n{#if rawResults}\n\t{#if tourneyName}\n\t\t<h1>{tourneyName}</h1>\n\t{/if}\n\t<ResultsTable players={resultsPlayers}/>\n\t\n{:else}\n\n{#if tourneyName}\n\t<h1 class=\"tourney-name\">{tourneyName}</h1>\n{:else}\n\t<img class=\"sheets-icon\" src=\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_spreadsheet_x32.png\" alt=\"Loading\"><span>&nbsp;Loading current tournament</span>\n{/if}\n\n<div class=\"teams\">\n\t{#if teams}\n\t\t{#each teams as team, i}\n\t\t\t<table class=\"team\" width=\"100%\" border=\"0\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<Team team={team} placeNumber={i+1} isFavorite={false}></Team>\t\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t  \t{/each}\n\t{:else if error}\n\t\t<div class=\"error\">\n\t\t\t<code>🚨 {error} 🚨</code>\n\t\t\t<br>\n\t\t\t<code>Scraping Blurb: {blurb}</code>\n\t\t</div>\n\t{:else}\n\t\t<img class=\"sheets-icon\" src=\"https://upload.wikimedia.org/wikipedia/en/thumb/7/77/PGA_Tour_logo.svg/233px-PGA_Tour_logo.svg.png\" alt=\"Loading\"><span>&nbsp;Scraping the PGA</span>\n\t{/if}\n</div>\n\n{/if}\n\n\n<style>\n\ta:link {\n\t\ttext-decoration: none;\n\t\tcolor: black;\n\t}\n\ta:visited {\n  \t\tcolor: black;\n\t}\n\t.tourney-name {\n\t  font-size: 18px;\n\t  text-align: center;\n\t  text-transform: uppercase;\n\t  margin-bottom: 5px;\n\t  font-weight: normal;\n\t}\n\t.panel-group {\n\t    margin-bottom: 20px;\n\t\tborder-radius: 4px;\n\t}\n\t.team {\n    \tmargin: 5px 0px;\n    \tborder-radius: 4px;\n    \tborder: 1px solid #ddd;\n    \tbackground-color: white;\n  \t}\n  \t.favorite-cell {\n  \t\tvertical-align: top;\n  \t\tpadding-top: 22px;\n  \t}\n  \t.error {\n  \t\tcolor: red;\n  \t\tbackground-color: white;\n  \t\tpadding: 10px;\n  \t}\n</style>"
  ],
  "names": [],
  "mappings": "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"
}